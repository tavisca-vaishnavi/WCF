//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18063
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Fixtures.myservice {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="myservice.IAddEmpRecords")]
    public interface IAddEmpRecords {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddEmpRecords/AddEmployee", ReplyAction="http://tempuri.org/IAddEmpRecords/AddEmployeeResponse")]
        string AddEmployee(string id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddEmpRecords/AddEmployee", ReplyAction="http://tempuri.org/IAddEmpRecords/AddEmployeeResponse")]
        System.Threading.Tasks.Task<string> AddEmployeeAsync(string id, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddEmpRecords/delete", ReplyAction="http://tempuri.org/IAddEmpRecords/deleteResponse")]
        int delete(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddEmpRecords/delete", ReplyAction="http://tempuri.org/IAddEmpRecords/deleteResponse")]
        System.Threading.Tasks.Task<int> deleteAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddEmpRecords/AddRemarks", ReplyAction="http://tempuri.org/IAddEmpRecords/AddRemarksResponse")]
        assg.Employee AddRemarks(string id, string remarks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddEmpRecords/AddRemarks", ReplyAction="http://tempuri.org/IAddEmpRecords/AddRemarksResponse")]
        System.Threading.Tasks.Task<assg.Employee> AddRemarksAsync(string id, string remarks);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddEmpRecords/ClearAllData", ReplyAction="http://tempuri.org/IAddEmpRecords/ClearAllDataResponse")]
        void ClearAllData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAddEmpRecords/ClearAllData", ReplyAction="http://tempuri.org/IAddEmpRecords/ClearAllDataResponse")]
        System.Threading.Tasks.Task ClearAllDataAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAddEmpRecordsChannel : Fixtures.myservice.IAddEmpRecords, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddEmpRecordsClient : System.ServiceModel.ClientBase<Fixtures.myservice.IAddEmpRecords>, Fixtures.myservice.IAddEmpRecords {
        
        public AddEmpRecordsClient() {
        }
        
        public AddEmpRecordsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AddEmpRecordsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AddEmpRecordsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AddEmpRecordsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string AddEmployee(string id, string name) {
            return base.Channel.AddEmployee(id, name);
        }
        
        public System.Threading.Tasks.Task<string> AddEmployeeAsync(string id, string name) {
            return base.Channel.AddEmployeeAsync(id, name);
        }
        
        public int delete(string id) {
            return base.Channel.delete(id);
        }
        
        public System.Threading.Tasks.Task<int> deleteAsync(string id) {
            return base.Channel.deleteAsync(id);
        }
        
        public assg.Employee AddRemarks(string id, string remarks) {
            return base.Channel.AddRemarks(id, remarks);
        }
        
        public System.Threading.Tasks.Task<assg.Employee> AddRemarksAsync(string id, string remarks) {
            return base.Channel.AddRemarksAsync(id, remarks);
        }
        
        public void ClearAllData() {
            base.Channel.ClearAllData();
        }
        
        public System.Threading.Tasks.Task ClearAllDataAsync() {
            return base.Channel.ClearAllDataAsync();
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="myservice.IRetrieveDetails")]
    public interface IRetrieveDetails {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetrieveDetails/Search", ReplyAction="http://tempuri.org/IRetrieveDetails/SearchResponse")]
        assg.Employee Search(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetrieveDetails/Search", ReplyAction="http://tempuri.org/IRetrieveDetails/SearchResponse")]
        System.Threading.Tasks.Task<assg.Employee> SearchAsync(string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetrieveDetails/SearchByName", ReplyAction="http://tempuri.org/IRetrieveDetails/SearchByNameResponse")]
        assg.Employee SearchByName(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetrieveDetails/SearchByName", ReplyAction="http://tempuri.org/IRetrieveDetails/SearchByNameResponse")]
        System.Threading.Tasks.Task<assg.Employee> SearchByNameAsync(string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetrieveDetails/GetAllDetails", ReplyAction="http://tempuri.org/IRetrieveDetails/GetAllDetailsResponse")]
        assg.Employee[] GetAllDetails();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRetrieveDetails/GetAllDetails", ReplyAction="http://tempuri.org/IRetrieveDetails/GetAllDetailsResponse")]
        System.Threading.Tasks.Task<assg.Employee[]> GetAllDetailsAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRetrieveDetailsChannel : Fixtures.myservice.IRetrieveDetails, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RetrieveDetailsClient : System.ServiceModel.ClientBase<Fixtures.myservice.IRetrieveDetails>, Fixtures.myservice.IRetrieveDetails {
        
        public RetrieveDetailsClient() {
        }
        
        public RetrieveDetailsClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RetrieveDetailsClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RetrieveDetailsClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RetrieveDetailsClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public assg.Employee Search(string id) {
            return base.Channel.Search(id);
        }
        
        public System.Threading.Tasks.Task<assg.Employee> SearchAsync(string id) {
            return base.Channel.SearchAsync(id);
        }
        
        public assg.Employee SearchByName(string name) {
            return base.Channel.SearchByName(name);
        }
        
        public System.Threading.Tasks.Task<assg.Employee> SearchByNameAsync(string name) {
            return base.Channel.SearchByNameAsync(name);
        }
        
        public assg.Employee[] GetAllDetails() {
            return base.Channel.GetAllDetails();
        }
        
        public System.Threading.Tasks.Task<assg.Employee[]> GetAllDetailsAsync() {
            return base.Channel.GetAllDetailsAsync();
        }
    }
}
